/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import classes.PrologConnection;
import classes.PrologParser;
import classes.RouteHandler;
import classes.RouteLine;
import java.awt.Graphics;
import java.util.List;
import javax.swing.JOptionPane;

public class Main extends javax.swing.JFrame {
     /**
     * Creates new form Main
     */
    private List<RouteLine> routeLines;

    private PrologConnection connection;
    
    public Main() {
        // Components initialization -> Java Logic
        initComponents();
                
        // Bussines Logic
        try {
            // Connect to prolog and get the connection instance
            String consultKnowledgeBase = "consult('maps.pl')";
            connection = PrologConnection.getInstance(consultKnowledgeBase);

            System.out.println((connection.success() ? "Connected!" : "failed :c"));
            
            // Create the map routeLines when the View is created
            this.routeLines = RouteHandler.createRouteLines();

            // Populate origin and destination combobox
            List<String> locations = connection.getLocations();
            for (String location : locations) {
                // Beautify the locations names from prolog
                String parsedLocation = PrologParser.prologNamesToBeautyNames(location);
                // Add to the comboxes values
                this.cmbOrigin.addItem(parsedLocation);
                this.cmbDestination.addItem(parsedLocation);
            }
            
            // Configure initial values for origin and destination comobobox
            this.cmbOrigin.setSelectedIndex(0);
            this.cmbDestination.setSelectedIndex(1);   
        } catch (Exception ex) {
            System.out.println("Error connecting to prolog knowledge base => " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorDestination = new javax.swing.JLabel();
        colorOrigin = new javax.swing.JLabel();
        txtColorDestination = new javax.swing.JLabel();
        txtColorOrigin = new javax.swing.JLabel();
        txtOrigin = new javax.swing.JLabel();
        cmbOrigin = new javax.swing.JComboBox<>();
        txtDestination = new javax.swing.JLabel();
        cmbDestination = new javax.swing.JComboBox<>();
        btnCalculate = new javax.swing.JButton();
        pnlMap = new javax.swing.JPanel();
        lblMapImage = new javax.swing.JLabel();
        btnShowLines = new javax.swing.JButton();
        btnClearLines = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prolog Maps");
        setResizable(false);

        colorDestination.setBackground(new java.awt.Color(255, 0, 0));
        colorDestination.setOpaque(true);

        colorOrigin.setBackground(new java.awt.Color(51, 255, 51));
        colorOrigin.setOpaque(true);

        txtColorDestination.setText("Destination");

        txtColorOrigin.setText("Origin");

        txtOrigin.setText("Origin");

        cmbOrigin.setMaximumSize(new java.awt.Dimension(72, 23));

        txtDestination.setText("Destination");

        cmbDestination.setMaximumSize(new java.awt.Dimension(72, 23));

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        lblMapImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/map.jpg"))); // NOI18N

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMapImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMapLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblMapImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnShowLines.setText("Show lines");
        btnShowLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowLinesActionPerformed(evt);
            }
        });

        btnClearLines.setText("Clear lines");
        btnClearLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearLinesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDestination)
                            .addComponent(cmbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCalculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOrigin)
                            .addComponent(cmbOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnShowLines, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(colorDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(colorOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtColorOrigin)
                                    .addComponent(txtColorDestination)))
                            .addComponent(btnClearLines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(pnlMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtOrigin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(txtDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnCalculate)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtColorOrigin)
                            .addComponent(colorOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtColorDestination)
                            .addComponent(colorDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                        .addComponent(btnShowLines)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearLines)
                        .addGap(55, 55, 55))))
        );

        getAccessibleContext().setAccessibleName("Prolog route calculator");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
         try {
            // Get the graphics object fron the JPanel (map container) to draw only on the map image
            Graphics graphics = this.pnlMap.getGraphics();
            
            // Clear the previous route from screen
            this.pnlMap.paint(graphics);
            
            // Get origin and destination from combobox selection
            String origin = this.cmbOrigin.getSelectedItem().toString();
            String destination = this.cmbDestination.getSelectedItem().toString();
            
            // Parsed the beautity combobox names to prolog names
            String parsedOrigin = PrologParser.beautyNamesToPrologNames(origin);
            String parsedDestination = PrologParser.beautyNamesToPrologNames(destination);
            
            if (parsedDestination.equals(parsedOrigin)) {
                JOptionPane.showMessageDialog(this, "Origin and destination can't be the same."); 
                return;
            } 
            
            // Get route from prolog
            List<String> route = connection.calculateRoute(parsedOrigin, parsedDestination);

            if(route.isEmpty()) {
                JOptionPane.showMessageDialog(this, "There isn't a route between " + origin + " and " + destination);
                return;
            }
            
            // Make visible the Lines that are contain in the list of route places from prolog
            RouteHandler.updateVisibility(route, routeLines);

            // Print the route lines on the map container (just the visible ones)
            RouteHandler.printRouteLines(graphics, this.routeLines);
            
            // Print the location marks on the map container
            RouteHandler.printLocationMarks(graphics, parsedOrigin, parsedDestination, routeLines);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error executing the operation");
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnShowLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowLinesActionPerformed
        // Get the graphics object fron the JPanel (map container) to draw only on the map image
        Graphics graphics = this.pnlMap.getGraphics();

        // Clear the previous route from screen
        this.pnlMap.paint(graphics);
        
        // Set all the route lines visible
        for (RouteLine routeLine : routeLines) {
            routeLine.setVisible(true);
        }
        
        // Print the route lines
        RouteHandler.printRouteLines(graphics, this.routeLines);
    }//GEN-LAST:event_btnShowLinesActionPerformed

    private void btnClearLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearLinesActionPerformed
        // Get the graphics object fron the JPanel (map container) to draw only on the map image
        Graphics graphics = this.pnlMap.getGraphics();

        // Clear the previous route from screen
        this.pnlMap.paint(graphics);
    }//GEN-LAST:event_btnClearLinesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnClearLines;
    private javax.swing.JButton btnShowLines;
    private javax.swing.JComboBox<String> cmbDestination;
    private javax.swing.JComboBox<String> cmbOrigin;
    private javax.swing.JLabel colorDestination;
    private javax.swing.JLabel colorOrigin;
    private javax.swing.JLabel lblMapImage;
    private javax.swing.JPanel pnlMap;
    private javax.swing.JLabel txtColorDestination;
    private javax.swing.JLabel txtColorOrigin;
    private javax.swing.JLabel txtDestination;
    private javax.swing.JLabel txtOrigin;
    // End of variables declaration//GEN-END:variables
}
